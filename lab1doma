/*
Дадена е двострано поврзана листа од цели броеви. Дополнително, даден е и уште еден природен број k. Последните k елементи од листата треба да се поместат на почетокот на листата, во истиот редослед.
Влез: Во првиот ред од влезот е даден бројот на елементи во листата - N, па во следните следниот ред самите елементи одделени со празно место. На крај, во последниот ред даден е и природниот број k. (k<=N)
Излез: На излез треба да се испечати листата пред и после промената.
You are given a doubly-linked list of integers. Additionally, there is one more natural number k. You need to replace the last k elements of the list to the beginning of the list, in the same order.
Input: The first number in the input is the number of integers in the list - N, then in the next line the elements are given, separated by spaces. Then, in the last line, the natural number k is given. (k<=N)
Output: The list before and after the transformation
For example:
Input	Result
5
1 2 3 4 5
2
1<->2<->3<->4<->5
4<->5<->1<->2<->3
4
1 3 5 7
4
1<->3<->5<->7
1<->3<->5<->7
*/



import java.util.Scanner;

class DLLNode<E>{
    protected E element;
    protected DLLNode<E> next, previous;
    public DLLNode(E element, DLLNode<E> next, DLLNode<E> previous){
        this.element= element;
        this.next= next;
        this.previous= previous;
    }
    @Override
    public String toString(){
        return element.toString();
    }
}


class DLL<E> {
    private DLLNode<E> first, last;

    public void insertLast(E element) {
        DLLNode<E> newNode = new DLLNode<>(element, null, null);
        if (first == null) {
            first = newNode;
            last = newNode;
        } else {
            last.next = newNode;
            newNode.previous = last;
            last = newNode;
        }
    }

    public void insertFirst(E element) {
        DLLNode<E> newNode = new DLLNode<>(element, first, null);
        if (first != null) {
            first.previous = newNode;
        } else {
            last = newNode;
        }
        first = newNode;
    }

    public E deleteLast() {
        if (last == null) return null;

        E element = last.element;
        if (first == last) {
            first = null;
            last = null;
        } else {
            last = last.previous;
            last.next = null;
        }
        return element;
    }

    public void printList() {
        DLLNode<E> tmp = first;
        while (tmp != null) {
            System.out.print(tmp.element);
            if(tmp.next !=null){
                System.out.print("<->");
            }
            tmp = tmp.next;
        }
    }
}
